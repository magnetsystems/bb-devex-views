
<div id="get-started" class="row-fluid page-view">
<ul class="nav nav-tabs" did="gs-nav-main">
    <li class="first">
        <h4 class="page-h4">Get Started</h4>
    </li>
    <li id="gs-step0-tab" class="active">
        <a href="#gs-step0">Introduction</a>
        <img src="/images/getstarted/gtstrtd_nav_selbg.png" />
    </li>
    <li id="gs-step1-tab">
        <a href="#gs-step1">Setup</a>
        <div>1</div>
        <img src="/images/getstarted/gtstrtd_nav_selbg.png" />
    </li>
    <li id="gs-step2-tab">
        <a href="#gs-step2">Build Mobile Backend</a>
        <div>2</div>
        <img src="/images/getstarted/gtstrtd_nav_selbg.png" />
    </li>
    <li id="gs-step3-tab">
        <a href="#gs-step3">Build Mobile Project</a>
        <div>3</div>
        <img src="/images/getstarted/gtstrtd_nav_selbg.png" />
    </li>
</ul>
<div class="tab-content" did="gs-nav-main">
<div class="tab-pane active"  id="gs-step0">
    <h4>Get Started Developing Mobile Apps</h4>
    <div class="guide-container">
        <div class="guide-row odd">
            <div class="guide-content">
                <b>Introduction</b>
                <p>This Get Started guide will teach you how to set up your development environment, install and use
                    the Mobile App Builder, and create your first mobile project. When you are ready to begin, click <b>Setup</b>
                    from the menu to the left. </p>
            </div>
        </div>
        <div class="guide-divider-empty"></div>
        <div class="guide-row odd">
            <img src="../images/getstarted/gtstrtd_hm_arrow-left.png" />
            <div class="guide-content">
                <b>Install Mobile App Builder</b>
                <p>This step will walk you through the process of installing the Mobile App Builder, a valuable tool designed
                    to simplify your development experience.
                </p>
            </div>
        </div>
        <div class="guide-divider-empty"></div>
        <div class="guide-row odd">
            <img src="../images/getstarted/gtstrtd_hm_arrow-left.png" />
            <div class="guide-content">
                <b>Build Your Mobile Backend</b>
                <p>Learn how to build and manage your server using the Mobile App Builder's command-line interface.</p>
            </div>
        </div>
        <div class="guide-divider-empty"></div>
        <div class="guide-row odd">
            <img src="../images/getstarted/gtstrtd_hm_arrow-left.png" />
            <div class="guide-content">
                <b>Build Your Mobile Project</b>
                <p>Learn how to embed the Magnet Mobile SDK into your mobile project and write controllers.</p>
            </div>
        </div>
    </div>
</div>
<div class="tab-pane"  id="gs-step1">
    <h4>Install Mobile App Builder</h4>
    <p>The Magnet Mobile App Builder is a command line utility that allows users to create their custom mobile app projects,
        add API modules, generate Mobile APIs for use with Mobile Server Library on iOS and Android, build the Mobile Backend,
        initialize local or remote databases, and manage the lifecycle of Mobile Backend instances (e.g. deploy, start, stop)
        either locally or in the cloud.</p>

        <a href="/resources/files/mab.zip" class="btn btn-primary">Download Magnet Mobile App Builder</a>
        <h5>Software required by the Mobile App Builder:</h5>
        <ol>
            <li>Java SE 7 Development Kit</li>
            <li>Maven 3.0.5 </li>
            <li>MySQL Community Server 5.5 GA</li>
        </ol>
        <h5>How to install the  Mobile App Builder:</h5>
        <ol>
            <li>Download the <a target="_blank" href="/resources/files/mab.zip">Magnet Mobile App Builder</a>.</li>
            <li>Unzip the archive to a directory of your choice. We recommend <b>$HOME/magnet</b>.</li>
            <li>
                For the Mobile App Builder to be accessible from any directory, consider adding
                <b>&lt;install-directory&gt;/mab/bin</b> to your PATH environment variable.
            </li>
        </ol>
        <p>For detailed installation instructions, see the <a href="/docs/mobile_app_builder/mobile_app_builder.pdf">Mobile App Builder Developer Guide</a></p>

</div>
<div class="tab-pane"  id="gs-step2">
    <h4>Build Your Mobile Backend</h4>
    <div class="guide-container">
        <div class="guide-content">

            <h5>Create and build a project</h5>
            <div class="code-snippet">
                <p>Create a Mobile App Project using a Mobile App Project Profile into your desired directory.</p>
                <pre>mab> project-create -o Documents/dev/projects -p Documents/Dev/projects/new-project1.zip</pre>
                <p>Build the server and Java APIs associated with the current project.</p>
                <pre>mab> project-build</pre>
            </div>
            <h5>Initialize the database and set up a user</h5>
            <div class="code-snippet">
                <p>Create the MySQL system database used by your mobile app. If you enabled the app database in the Project Wizard, the app database will also be created.</p>
                <pre>mab> db-initialize</pre>
                <p>Optionally create a user in the system database for user authentication by specifying the username and password of the user.</p>
                <pre>mab> user-create newuser newpass</pre>
            </div>
            <p>For more information, see the <a href="/docs/mobile_app_builder/mobile_app_builder.pdf">Mobile App Builder Developer Guide</a></p>


            <h5>Deploy the Magnet Mobile Backend</h5>
            <p>The following commands assume that the project has already been built (using the <b>project-build</b> command).</p>
            <div class="code-snippet">
                <p>Start the Magnet Mobile Backend locally.</p>
                <pre>mab> server-start</pre>
                <p>To verify that the server is running and to view a list of controllers, open the following url in your browser.</p>
                <pre>http://localhost:8080/</pre>
                <p>View a list of running Magnet Mobile Backends.</p>
                <pre>mab> server-list</pre>
                <p>Stop the Magnet Mobile Backend.</p>
                <pre>mab> server-stop</pre>
            </div>
            <p>For more information including how to deploy to an AWS cloud instance, see the <a href="/docs/mobile_app_builder/mobile_app_builder.pdf">Mobile App Builder Developer Guide</a></p>



            <h5>Add a custom controller</h5>
            <p>A single command is used to add different controllers to your current project. The following commands assume that you are logged in to the Mobile App Builder and that a project has been created (using <b>project-create</b> or <b>project-import</b>).</p>
            <div class="code-snippet">
                <p>Add a WSDL-based controller of type document/literal or rpc/literal. You will be asked to enter additional information about the WSDL.</p>
                <pre>mab> api-add -t ws</pre>
                <p>Add a WSDL-based controller of type rpc/encoded.</p>
                <pre>mab> api-add -t rpc</pre>
                <p>Add a WADL-based controller.</p>
                <pre>mab> api-add -t rs</pre>
                <p>Add the Magnet Hello World Controller sample to your project.</p>
                <pre>mab> api-add -t simple</pre>
                <p>Add a Magnet Third Party controller (currently <b>facebook</b>, <b>linkedin</b>, and <b>salesforce</b> are supported).</p>
                <pre>mab> api-add -t facebook</pre>
                <p>After adding the controllers, the project must be re-built and re-deployed for the changes to take effect.</p>
                <pre>mab> server-stop</pre>
                <pre>mab> project-build</pre>
                <pre>mab> server-start</pre>
            </div>
            <p>For more information, see the <a href="/docs/mobile_app_builder/mobile_app_builder.pdf">Mobile App Builder Developer Guide</a></p>

        </div>
    </div>
</div>
<div class="tab-pane" id="gs-step3">
<h4>Build Your Mobile Project</h4>
<div class="guide-container">
<div class="guide-content">

<ul class="nav nav-tabs" did="gs-nav-sub">
    <li class="active">
        <a href="#gs-android-flow">
            Android
            <img src="/images/getstarted/getstarted_android.png" />
        </a>
    </li>
    <li>
        <a href="#gs-ios-flow">
            iOS
            <img src="/images/getstarted/getstarted_ios.png" />
        </a>
    </li>
    <li>
        <a href="#gs-js-flow">
            JavaScript
            <img src="/images/getstarted/getstarted_js.png" />
        </a>
    </li>
</ul>

<!-- start subtab -->
<div class="tab-content" did="gs-nav-sub">
<div class="tab-pane active" id="gs-android-flow">

<p>In this tutorial, you will learn how to build a "Jumpstart" Android
    app that interacts with a "Jumpstart" Mobile Backend running
    locally.</p>

<h3>1. Prerequisites</h3>

<ol>
    <li>Mobile App Builder tool.</li>
    <li><a href="http://developer.android.com/tools/index.html">Android SDK</a> with Eclipse, minimally Android 4.1.2, API Level 16.</li>
    <li><a href="https://github.com/magnetsystems/magnet-sdk-android">Magnet Mobile SDK for Android</a></li>
</ol>

<h3>2. Build the Mobile Backend</h3>

<h4>Use the Mobile App Builder tool to first build a Mobile Backend
    server.</h4>

<p>The following command will automatically build a sample Mobile Backend server for the Jumpstart app that contains
    two controller APIs: HelloWorld and basic operations like create, read, update and delete on a sample Entity:</p>
<pre>jumpstart@local:mab&gt; run jumpstart.mab</pre>

<p>
    You can also find detailed instructions for building the above Mobile
    Backend server from scratch from Step 2: Build Mobile Backend.
</p>

<h3>3. Create Android App Project</h3>

<p>Create a new Android Application called &quot;Jumpstart&quot; using Eclipse.</p>

<h3>4. Import Mobile SDK and copy generated mobile API assets:</h3>

<h4>Generate the Mobile APIs</h4>

<p>You can generate the mobile API by running the following command on
    the Mobile App Builder tool:</p>
        <pre>jumpstart@local:mab&gt; api-generate android</pre>

<p>This command would generate the mobile API in the following
    directory: <code>~/MABProjects/jumpstart/mobile/apis/assets/android</code></p>

<h4>Copy the Mobile APIs and Configuration files</h4>

<p>You can copy the generated mobile assets to your Android project
    directory by running the following command on the Mobile App Builder
    tool:</p>
        <pre>jumpstart@local:mab&gt; exec cp -R ~/MABProjects/jumpstart/mobile/apis/assets/android/com/magnetapi/* &lt;/path/to/MyProject/src/com/magnetapi&gt;
jumpstart@local:mab&gt; exec cp ~/MABProjects/jumpstart/mobile/apis/assets/android/*beans*.jar &lt;/path/to/MyProject/libs&gt;
jumpstart@local:mab&gt; exec cp ~/MABProjects/jumpstart/mobile/apis/assets/android/magnet_type_mapper.xml &lt;/path/to/MyProject/assets&gt;
</pre>

<h4>Import Mobile SDK as library project to Eclipse</h4>

<p>Create the Magnet library as an &quot;Android Library&quot; project and
    include it in your Android app as a dependency:</p>

<ol>
    <li>File-&gt;New Project-&gt;Android-&gt;Android Project from
        Existing Code</li>

    <li>Browse to the unzipped Magnet library project directory and
        select "libproject/2.3.0" as the "Root Directory". A new Android
        project will be created with the name "magnetlib-2.3.0"</li>

    <li>Select the newly created library project and right click
        Properties, under "Android", "is library" must be checked.</li>

    <li>From your main Android application project, add the library
        project under Project Properties-&gt;"Android", select the
        "magnetlib-2.3.0" library project and add it.</li>

    <li>Build your main Android application project using Eclipse.</li>
</ol>

<h3>5. Use the Mobile APIs</h3>

<h4>Call the HelloWorld
    controller API</h4>

<p>The HelloWorld controller API concatenates the string <code>Hello</code> with the input string argument and returns it. For
    example, given the input string argument <code>Magnet</code> it returns
    the string <code>Hello Magnet</code>.</p>

<p>To call the HelloWorld controller API, follow these steps:</p>

<h6>
    Import the HelloWorldController and HelloWorldControllerFactory
    classes</h6>
        <pre>import com.magnetapi.apps.jumpstart.controllers.helloworld.api.HelloWorldController;
import com.magnetapi.apps.jumpstart.controllers.helloworld.api.HelloWorldControllerFactory;</pre>

<h6>Initialize the MagnetMobileClient instance and connection configuration</h6>
<pre>// Initialize MagnetMobileCient for this Activity
MagnetMobileClient magnetClient = MagnetMobileClient.getInstance(getApplicationContext());

// Get instance of connection configuration manager
ConnectionConfigManager cm = magnetClient.getManager(ConnectionConfigManager.class, this);

// Retrieve connection configuration for the backend from
// assets/connection_configs.xml
// TODO If no configuration, create one
ConnectionConfig connConfig = cm.getConnectionConfig("jumpstart");
</pre>

<h6>Initialize the HelloWorldController controller</h6>
<pre>try {
// instantiate controller factory
HelloWorldControllerFactory cf = new HelloWorldControllerFactory(magnetClient);

// get an instance of the controller
HelloWorldController hwController = cf.obtainInstance("jumpstart");
} catch (SchemaException e) {
// TODO Auto-generated catch block
e.printStackTrace();
}</pre>

<h6>Call the HelloWorldController controller</h6>
<pre>Call&lt;String&gt; call = hwController.postHello(input, new AsyncCallOptions());
// blocks until response is returned
String response = call.get();</pre>

<h4>Call the SimpleEntity controller API</h4>

<p>The SimpleEntity controller API provides basic operations like
    create, read, update and delete on a sample Entity.</p>

<p>To call the SimpleEntity controller API, follow these steps:</p>

<h6>
    Import the SimpleEntityController and SimpleEntityControllerFactory classes</h6>
        <pre>import com.magnetapi.apps.jumpstart.controllers.helloworld.api.SimpleEntityController;
import com.magnetapi.apps.jumpstart.controllers.helloworld.api.SimpleEntityControllerFactory;</pre>

<h6>Initialize the SimpleEntityController controller</h6>
    <pre> try {
// instantiate controller factory
SimpleEntityControllerFactory ef = new SimpleEntityControllerFactory(magnetClient);

// get an instance of the controller
SimpleEntityController entityController = ef.obtainInstance("jumpstart");
} catch (SchemaException e) {
// TODO Auto-generated catch block
e.printStackTrace();
}</pre>

<h6>Call the SimpleEntityController controller</h6>
    <pre>// Initialize a SimpleEntityBean using the generated SimpleEntityBeanBuilder class
SimpleEntityBeanBuilder builder = new SimpleEntityBeanBuilder();
builder.name(&quot;John Appleseed&quot;).customerId(100);

// Initialize a SimpleValueBean using the generated SimpleValueBeanBuilder class
SimpleValueBeanBuilder valueBuilder = new SimpleValueBeanBuilder();
valueBuilder.bigDecimal(BigDecimal.TEN);  // workaround since this column is not nullable
valueBuilder.character(&quot;c&quot;);
valueBuilder._boolean(false);
simpleEntityBean.value = simpleValueBean;

// set value of SimpleValueBean
builder.value(valueBuilder.build());

// Call the controller to create the SimpleEntityBean using null as async options
Call&lt;Integer&gt; call = entityController.create(builder.build(), null);
Integer id = call.get();</pre>

<h4>Putting it together</h4>

<p>You can call the HelloWorld and SimpleEntity controller APIs by
    adding the code below to <code>HelloWorldActivity</code>:</p>

<p>Note: this code is strictly for demonstration purpose. Controller
    calls should not be invoked from onCreate() method as it incurrs a
    network request.</p>
<pre>import com.magnet.android.mms.MagnetMobileClient;
import com.magnet.android.mms.async.AsyncCallOptions;
import com.magnet.android.mms.async.Call;
import com.magnet.android.mms.connection.ConnectionConfigManager;
import com.magnet.android.mms.connection.ConnectionConfigManager.ConnectionConfig;
import com.magnet.android.mms.exception.SchemaException;
import com.magnetapi.apps.jumpstart.controllers.helloworld.api.HelloWorldController;
import com.magnetapi.apps.jumpstart.controllers.helloworld.api.HelloWorldControllerFactory
import com.magnetapi.apps.jumpstart.controllers.helloworld.api.SimpleEntityController;
import com.magnetapi.apps.jumpstart.controllers.helloworld.api.SimpleEntityControllerFactory;
public class HelloWorldActivity extends Activity {
private static final String LOG_TAG = HelloWorldActivity.class.getSimpleName();
private MagnetMobileClient magnetClient;
private HelloWorldController hwController;  // for Hello World controller

protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    setContentView(R.layout.hello_world_activity);

    // initialize MagnetMobileClient
    magnetClient = MagnetMobileClient.getInstance(getApplicationContext());

      HelloWorldControllerFactory cf = new HelloWorldControllerFactory(magnetClient);
      ConnectionConfigManager cm = magnetClient.getManager(ConnectionConfigManager.class, this);
      ConnectionConfig connConfig = cm.getConnectionConfig(&quot;jumpstart&quot;);
      try {
        if (connConfig != null) {
              hwController = cf.obtainInstance(&quot;jumpstart&quot;);
             Call&lt;String&gt; call = hwController.postHello(input, new AsyncCallOptions());
              // blocks until response is returned
              // *** Strictly for demonstration purpose and should not be in onCreate() method as it waits for network request to complete
              String response = call.get();

            // instantiate controller factory
            SimpleEntityControllerFactory ef = new SimpleEntityControllerFactory(magnetClient);

            // get an instance of the controller
            SimpleEntityController entityController = ef.obtainInstance(&quot;jumpstart&quot;);
            // Initialize a SimpleEntityBean
            SimpleEntityBeanBuilder builder = new SimpleEntityBeanBuilder();
            builder.name(&quot;John Appleseed&quot;).customerId(100);

            // Initialize a SimpleValueBean
            SimpleValueBeanBuilder valueBuilder = new SimpleValueBeanBuilder();
            valueBuilder.bigDecimal(BigDecimal.TEN);  // workaround since this column is not nullable
            valueBuilder.character(&quot;c&quot;);
            valueBuilder._boolean(false);
            simpleEntityBean.value = simpleValueBean;

            // set value of SimpleValueBean
            builder.value(valueBuilder.build());

            // Call the controller to create the SimpleEntityBean using null as async options
            Call&lt;Integer&gt; call = entityController.create(builder.build(), null);
              // blocks until response is returned
              // *** Strictly for demonstration purpose and should not be in onCreate() method as it waits for network request to complete

            Integer id = call.get();
        }
      } catch (SchemaException e) {
        // TODO Auto-generated catch block
        Log.e(LOG_TAG, &quot;failed to get instance of the controller&quot;);
    }
  }
}
</pre>

<h3>6. Deploy the Mobile Backend</h3>

<p>You can deploy the Mobile Backend server for the Jumpstart app to
    your local machine by running the following command on the Mobile App
    Builder tool:</p>
        <pre>jumpstart@local:mab&gt; server-start</pre>

<h3>7. Run the app</h3>

<p>You are now ready to run the Jumpstart app on the Android emulator using Eclipse!</p>
   

<h3>8. Where To Go From Here?</h3>

<p>You can download the completed project from <a href="https://someurl.git">here</a> or clone this project using git:</p>
<pre>$ git clone https://someurl.git</pre>

</div>
<div class="tab-pane" id="gs-ios-flow">

<p>
    In this tutorial, you will learn how to build a "Jumpstart" iOS app that
    interacts with a "Jumpstart" Mobile Backend running locally.
</p>

<h3>
    1. Prerequisites
</h3>

<ol>
    <li>
        Mobile App Builder tool
    </li>

    <li> Xcode 5 </li>

    <li>
        CocoaPods (Installation instructions can be found here:
        <a href="http://cocoapods.org">CocoaPods</a>)
    </li>
    <li><a href="https://github.com/magnetsystems/magnet-sdk-ios">Magnet Mobile SDK for iOS</a></li>
</ol>

<h3>
    2. Build the Mobile Backend
</h3>

<h4 id=
    "use-the-mobile-app-builder-tool-to-first-build-a-mobile-backend-server">
    Use the Mobile App Builder tool to first build a Mobile Backend
    server.
</h4>

<p>
    The following command will automatically build a sample Mobile Backend
    server for the Jumpstart app that contains two controller APIs: HelloWorld
    and basic operations like create, read, update and delete on a sample
    Entity:
</p>
<pre>jumpstart@local:mab&gt; run jumpstart.mab</pre>

<p>
    You can also find detailed instructions for building the above Mobile
    Backend server from scratch from Step 2: Build Mobile Backend.
</p>

<h3 id="3-create-xcode-project">
    3. Create Xcode project
</h3>

<p>
    Create a new Single View Application called "Jumpstart" using Xcode:
    <img alt="Create Project" src=
    "/images/getstarted/getstarted_ios_img1.png">
</p>

<h3 id="4-import-mobile-sdk-and-mobile-apis-using-cocopods">
    4. Import
    Mobile SDK and Mobile APIs using CocoPods
</h3>

<h4>
    Generate the Mobile APIs
</h4>

<p>
    You can generate the mobile API by running the following command on the
    Mobile App Builder tool:
</p>
<pre>jumpstart@local:mab&gt; api-generate ios</pre>

<p>
    This command would generate the mobile API in the following directory:
    <code>~/MABProjects/jumpstart/mobile/apis/assets/ios</code>
</p>

<h4>
    Copy the Mobile APIs
</h4>

<p>
    You can copy the generated mobile API to your Xcode project directory by
    running the following command on the Mobile App Builder tool:
</p>
<pre>jumpstart@local:mab&gt; exec cp ~/MABProjects/jumpstart/mobile/apis/assets/ios/Source /path/to/MyProject</pre>

<h4>
    Create Podfile to contain Mobile APIs and Mobile SDK
</h4>

<p>
    Create a Podfile in your Xcode project directory.
</p>
<pre>platform :ios, '7.0'
pod 'MagnetMobileServer', :git =&gt; 'git@bitbucket.org:magneteng/magnet-sdk-ios-2.3.0.git'
pod 'magnet-mobile-assets', :path =&gt; 'Source'</pre>

<p>
    This would install the Mobile SDK for iOS and your generated Mobile API
    in your project in the next step. At this stage, your Xcode project
    directory structure should look like this:
    <img alt="Create Project" src="/images/getstarted/getstarted_ios_img2.png">
</p>

<p>
    A sample Podfile is also available in the generated Mobile API here:
    <code>~/MABProjects/jumpstart/mobile/apis/assets/ios/Podfile</code>
</p>

<h4>
    Install dependencies in your project
</h4>

<p>
    If you haven't installed CocoaPods already, you can follow the
    installation instructions on their website: http://cocoapods.org In your
    Xcode project directory, install the dependencies by running the following
    command on the terminal:
</p>
<pre>$ pod install</pre>

<p>
    <strong>Note</strong>: Please note that if your installation fails, it
    may be because you are installing with a version of Git lower than
    CocoaPods is expecting. Please ensure that you are running Git &gt;= 1.8.0
    by executing <code>git --version</code>. You can get a full picture of the
    installation details by executing <code>pod install --verbose</code>.
</p>

<p>
    Make sure to always open the Xcode workspace <code>jumpstart.xcworkspace</code> instead of the project file when building your project:
</p>
<pre>$ open Jumpstart.xcworkspace</pre>

<h3>
    5. Use the Mobile APIs
</h3>

<h4>
    Call the HelloWorld controller API
</h4>

<p>
    The HelloWorld controller API concatenates the string <code>Hello</code>
    with the input string argument and returns it. For example, given the input
    string argument <code>Magnet</code> it returns the string <code>Hello Magnet</code>.
</p>

<p>
    To call the HelloWorld controller API, follow these steps:
</p>

<h6>
    Import the HelloWorldController header
</h6>
<pre>#import "HelloWorldController.h"</pre>

<h6>
    Initialize the HelloWorldController controller
</h6>
<pre>HelloWorldController *helloWorldController = [[HelloWorldController alloc] init];</pre>

<h6>
    Call the HelloWorldController controller
</h6>
<pre>[helloWorldController getHello:@"Magnet" options:nil success:^(NSString *response) {
    NSLog(@"response = %@", response); // executed if the Mobile Backend returns a valid response
} failure:^(NSError *error) {
    NSLog(@"error = %@", error); // executed if the Mobile Backend returns an error
}];</pre>

<h4>
    Call the SimpleEntity controller API
</h4>

<p>
    The SimpleEntity controller API provides basic operations like create,
    read, update and delete on a sample Entity.
</p>

<p>
    To call the SimpleEntity controller API, follow these steps:
</p>

<h6>
    Import the SimpleEntityController header
</h6>
<pre>#import "SimpleEntityController.h"</pre>

<h6>
    Initialize the SimpleEntityController controller
</h6>
<pre>SimpleEntityController *simpleEntityController = [[SimpleEntityController alloc] init];</pre>

<h6>
    Call the SimpleEntityController controller
</h6>
<pre>// Initialize a SimpleEntityBean
SimpleEntityBean *simpleEntityBean = [[SimpleEntityBean alloc] init];
simpleEntityBean.name = @"John Appleseed";
simpleEntityBean.customerId = arc4random() % 100000; // Generate a random customerId

// Initialize a SimpleValueBean
SimpleValueBean *simpleValueBean = [[SimpleValueBean alloc] init];
simpleValueBean.boolean = NO;
simpleValueBean.character = @"c";
simpleValueBean.bigDecimal = [NSDecimalNumber decimalNumberWithString:@"1.0"];
simpleEntityBean.value = simpleValueBean;

// Call the controller to create the SimpleEntityBean
[simpleEntityController create:simpleEntityBean options:nil success:^(int response) {
    NSLog(@"response = %d", response); // executed if the Mobile Backend returns a valid response
} failure:^(NSError *error) {
    NSLog(@"error = %@", error); // executed if the Mobile Backend returns an error
}];</pre>

<h4>
    Putting it together
</h4>

<p>
    You can call the HelloWorld and SimpleEntity controller APIs by adding the code below to <code>ViewController.m</code>:
</p>
<pre>#import "ViewController.h"
// Import controller API headers
#import "HelloWorldController.h"
#import "SimpleEntityController.h"
#import "SimpleEntityBean.h"
#import "SimpleValueBean.h"

@interface ViewController ()

@end

@implementation ViewController

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Call HelloWorldController
    [self callHelloWorldController];
    // Call SimpleEntityController
    [self callSimpleEntityController];
}

- (void)callHelloWorldController {
    // Initialize controller
    HelloWorldController *helloWorldController = [[HelloWorldController alloc] init];

    // Call controller
    [helloWorldController getHello:@"Magnet" options:nil success:^(NSString *response) {
        NSLog(@"response = %@", response); // executed if the Mobile Backend returns a valid response
    } failure:^(NSError *error) {
        NSLog(@"error = %@", error); // executed if the Mobile Backend returns an error
    }];
}

- (void)callSimpleEntityController {
    // Initialize controller
    SimpleEntityController *simpleEntityController = [[SimpleEntityController alloc] init];

    // Initialize a SimpleEntityBean
    SimpleEntityBean *simpleEntityBean = [[SimpleEntityBean alloc] init];
    simpleEntityBean.name = @"John Appleseed";
    simpleEntityBean.customerId = arc4random() % 100000; // Generate a random customerId

    // Initialize a SimpleValueBean
    SimpleValueBean *simpleValueBean = [[SimpleValueBean alloc] init];
    simpleValueBean.boolean = NO;
    simpleValueBean.character = @"c";
    simpleValueBean.bigDecimal = [NSDecimalNumber decimalNumberWithString:@"1.0"];
    simpleEntityBean.value = simpleValueBean;

    // Call the controller to create the SimpleEntityBean
    [simpleEntityController create:simpleEntityBean options:nil success:^(int response) {
        NSLog(@"response = %d", response); // executed if the Mobile Backend returns a valid response
    } failure:^(NSError *error) {
        NSLog(@"error = %@", error); // executed if the Mobile Backend returns an error
    }];
}

@end</pre>

<h3>
    6. Deploy the Mobile Backend
</h3>

<p>
    You can deploy the Mobile Backend server for the Jumpstart app to your
    local machine by running the following command on the Mobile App Builder
    tool:
</p>
<pre>jumpstart@local:mab&gt; server-start</pre>

<h3>
    7. Run the app
</h3>

<p>
    You are now ready to run the Jumpstart app on the iOS simulator using
    Xcode!
</p>

<h3>
    8. Where To Go From Here?
</h3>

<p>
    You can download the completed project from <a href="https://someurl.git">here</a> or clone this project using git:
</p>
<pre>$ git clone https://someurl.git</pre>

</div>
<div class="tab-pane" id="gs-js-flow">

<p>
    In this tutorial, you will learn how to build a "Jumpstart" PhoneGap app that
    interacts with a "Jumpstart" Mobile Backend running locally.
</p>

<h3>
    1. Prerequisites
</h3>

<ol>
    <li>
        Mobile App Builder tool
    </li>

    <li>
        PhoneGap (Installation instructions can be found here:
        <a href="http://phonegap.com/install/">PhoneGap</a>)
    </li>
    <li><a href="https://github.com/magnetsystems/magnet-sdk-javascript">Magnet Mobile SDK for JavaScript</a></li>
</ol>

<h3>
    2. Build the Mobile Backend
</h3>

<h4>
    Use the Mobile App Builder tool to first build a Mobile Backend
    server.
</h4>

<p>
    The following command will automatically build a sample Mobile Backend
    server for the Jumpstart app that contains two controller APIs: HelloWorld
    and basic operations like create, read, update and delete on a sample
    Entity:
</p>
<pre>jumpstart@local:mab&gt; run jumpstart.mab</pre>

<p>
    You can also find detailed instructions for building the above Mobile
    Backend server from scratch from Step 2: Build Mobile Backend.
</p>

<h3>
    3. Create PhoneGap Project
</h3>

<p>
    Create a new PhoneGap app called &quot;Jumpstart&quot; using the <code>phonegap</code>
    command-line tool. The command below will create a new directory containing the PhoneGap project.
</p>
                    <pre>phonegap create Jumpstart
cd Jumpstart</pre>

<h3>
    4. Import
    Mobile SDK and Mobile APIs
</h3>

<h4>
    Generate the Mobile APIs
</h4>

<p>
    You can generate the mobile API by running the following command on the
    Mobile App Builder tool:
</p>
<pre>jumpstart@local:mab&gt; api-generate js</pre>

<p>
    This command would generate the mobile API in the following directory:
    <code>
        ~/MABProjects/jumpstart/mobile/apis/assets/js
    </code>
</p>

<h4>
    Import the Mobile APIs
</h4>

<p>
    The generated mobile APIs should be placed in the <code>Jumpstart/www/js</code> directory.
    You can copy the mobile APIs to your PhoneGap project directory by
    running the following command on the Mobile App Builder tool:
</p>
<pre>jumpstart@local:mab&gt; exec cp ~/MABProjects/jumpstart/mobile/apis/assets/js /path/to/Jumpstart/www/js</pre>

<p>Download and place magnet-sdk.js into the <code>Jumpstart/www/js</code> directory within your project.
    In your HTML file, add a script tag reference to the mobile APIs.</p>
<pre>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;My JumpStart App&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;script type="text/javascript" src="js/controllers.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="js/models.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>

<h4>
    Import the Mobile SDK
</h4>

<p>Visit the <a href="https://github.com/magnetsystems/magnet-sdk-javascript">Mobile SDK for JavaScript GitHub Page</a> to download the SDK (<code>magnet-sdk.js</code>).</p>

<p>Download and place magnet-sdk.js into the <code>Jumpstart/www/js</code> directory within your project.
    In your HTML file, add a script tag reference to the file. Make sure the SDK is referenced before the mobile APIs
    by placing the SDK script tag above the mobile API script tags.</p>
<pre>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;My JumpStart App&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;script type="text/javascript" src="js/magnet-sdk.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="js/controllers.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="js/models.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>

<h3 id="5-use-the-mobile-apis">
    5. Use the Mobile APIs
</h3>

<h4 id="call-the-helloworld-controller-api">
    Call the HelloWorld controller API
</h4>

<p>
    The HelloWorld controller API concatenates the string
    <code>Hello</code>
    with the input string argument and returns it. For example, given the input
    string argument
    <code>Magnet</code>
    it returns the string
    <code>Hello Magnet</code>.
</p>

<p>
    To call the HelloWorld controller API, follow these steps:
</p>

<h6>
    Initialize the HelloWorldController controller
</h6>
<pre>var helloWorldController = new MagnetJS.Controllers.HelloWorldController();</pre>

<h6>
    Call the HelloWorldController controller
</h6>
                    <pre>helloWorldController.getHello({
    param0 : 'Magnet'
}, {
    success : function(data, details){
        // executed if the Mobile Backend returns a valid response
    },
    error : function(error, details){
        // executed if the Mobile Backend returns an error
    }
});</pre>

<h4>
    Call the SimpleEntity controller API
</h4>

<p>
    The SimpleEntity controller API provides basic operations like create, read, update and delete on a sample Entity.
</p>

<p>
    To call the SimpleEntity controller API, follow these steps:
</p>

<h6>
    Initialize the SimpleEntityController controller
</h6>
<pre>var simpleEntityController = new MagnetJS.Controllers.SimpleEntityController();</pre>

<h6>
    Call the SimpleEntityController controller
</h6>
                    <pre>// Initialize a SimpleEntityBean
var simpleEntityBean = new MagnetJS.Models.SimpleEntityBean({
    "name"       : "John Appleseed",
    "customerId" : 100000
});
// Initialize a SimpleValueBean
var simpleValueBean = new MagnetJS.Models.SimpleValueBean({
    "boolean"    : false,
    "character"  : "C",
    "bigDecimal" : 1.0
});

simpleEntityBean.set({
    "value" : simpleValueBean
});

// Call the controller to create the SimpleEntityBean
controller.create({
    data : simpleEntityBean
}, {
    success : function(data, details){
        // executed if the Mobile Backend returns a valid response
    },
    error : function(error, details){
        // executed if the Mobile Backend returns an error
    }
});</pre>

<h4>
    Putting it together
</h4>

<p>
    You can call the HelloWorld and SimpleEntity controller APIs by adding the code below to
    <code>index.html</code>
    :
</p>
                <pre>&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;My JumpStart App&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;cordova.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;js/magnet-sdk.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;js/controllers.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;js/models.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;

MagnetJS.set({
    endpointUrl : &#39;http://localhost:8080&#39;
});

var helloWorldController = new MagnetJS.Controllers.HelloWorldController();

helloWorldController.getHello({
    param0 : &#39;Magnet&#39;
}, {
    success : function(data, details){
        // executed if the Mobile Backend returns a valid response
    },
    error : function(error, details){
        // executed if the Mobile Backend returns an error
    }
});

var simpleEntityController = new MagnetJS.Controllers.SimpleEntityController();

// Initialize a SimpleEntityBean
var simpleEntityBean = new MagnetJS.Models.SimpleEntityBean({
    &quot;name&quot;       : &quot;John Appleseed&quot;,
    &quot;customerId&quot; : 100000
});
// Initialize a SimpleValueBean
var simpleValueBean = new MagnetJS.Models.SimpleValueBean({
    &quot;boolean&quot;    : false,
    &quot;character&quot;  : &quot;C&quot;,
    &quot;bigDecimal&quot; : 1.0
});

simpleEntityBean.set({
    &quot;value&quot; : simpleValueBean
});

// Call the controller to create the SimpleEntityBean
simpleEntityController.create({
    data : simpleEntityBean
}, {
    success : function(data, details){
        // executed if the Mobile Backend returns a valid response
    },
    error : function(error, details){
        // executed if the Mobile Backend returns an error
    }
});

&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;</pre>

<h3>
    6. Deploy the Mobile Backend
</h3>

<p>
    You can deploy the Mobile Backend server for the Jumpstart app to your
    local machine by running the following command on the Mobile App Builder
    tool:
</p>
<pre>jumpstart@local:mab&gt; server-start</pre>

<h3>
    7. Run the app
</h3>

<p>
    Before you run the app, make sure you have configured your PhoneGap project to allow all origins.
    In <code>www/config.xml</code>, set <code>&lt;access origin=&quot;*&quot; /&gt;</code>.
</p>

<p>
    To run the Jumpstart app, use the <code>cordova</code> command-line tool
    to add platforms and deploy to a simulator. The following commands will add an iOS platform,
    build, and deploy your PhoneGap project.
</p>
                    <pre>cordova platform add ios
cordova run ios</pre>

<h3>
    8. Where To Go From Here?
</h3>

</div>
</div>
<!-- end subtab -->

</div>
</div>
</div>

</div>